name: Cross-Platform Build

on:
  push:
    branches: [ '**' ]
    tags: [ '**' ]
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Linux (Clang)"
            runner: ubuntu-latest
            artifact_name: examples-linux-clang

          - name: "Windows (MinGW Cross-Compile)"
            runner: windows-latest
            artifact_name: examples-windows-mingw

    runs-on: ${{ matrix.runner }}

    env:
      CC: ${{ contains(matrix.name, 'Clang') && 'clang' || 'gcc' }}
      CXX: ${{ contains(matrix.name, 'Clang') && 'clang++' || 'g++' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies (Linux)
        if: matrix.runner == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang

      - name: Installing Dependencies (Windows)
        if: matrix.runner == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake

      - name: Configure CMake
        shell: ${{ matrix.runner == 'windows-latest' && 'msys2 {0}' || 'bash' }}
        run: |
          if [ "${{ matrix.runner }}" == "windows-latest" ]; then
            cmake -B build -S . -G "MinGW Makefiles" -DBUILD_EXAMPLES=ON
          else
            cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=ON
          fi

      - name: Build with CMake
        shell: ${{ matrix.runner == 'windows-latest' && 'msys2 {0}' || 'bash' }}
        run: cmake --build build --config Release --parallel

      - name: Archive examples
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: build/bin/